# yaml-language-server: $schema=https://taskfile.dev/schema.json

version: "3"

vars:
    GO_MODULES:
        sh: cat go.work | grep -oEh  '\t+(\./*[^[:space:]]*)' | tr -d '\t'
    BINARY_NAME: "ss"
    JSONSCHEMA_FILES:
        sh: find . -type f -name '*.schema.json'
    MOCKERY_SOURCE_FILES:
        sh: 'grep -r "//go:mockery" --include="*.go" . | cut -d: -f1 | sort | uniq'

includes:
    tool:
        optional: true
        taskfile: "./gen/taskfiles/Taskfile.tools.yml"
    script:
        optional: true
        taskfile: "./gen/taskfiles/Taskfile.scripts.yml"

tasks:
    generate-taskfiles:
        run: once
        env: { OUTPUT_DIR: "./out", SCRIPTS_DIR: "./scripts", TASKFILE_OUTPUT_DIR: "./gen/taskfiles" }
        cmds:
            - ./scripts/generate-taskfiles.sh --generate-taskfiles
        sources:
            - ./tools/**/*
            - ./scripts/**/*
        generates:
            - "./gen/taskfiles/**/*"

    mockery:
        deps: [generate-mockery-config]
        cmds:
            - ./go tool mockery --config=./gen/mockery/.mockery.yaml
            - find ./gen/mockery/*.go -type f -not -mmin -1 -delete
        generates:
            - ./gen/mockery/*.go
        sources:
            - "{{.MOCKERY_SOURCE_FILES}}"
            - gen/mockery/.mockery.yaml

    test:
        cmd: ./go test ./...
        env:
            MAX_LINES: '{{.MAX_LINES | default "1000"}}'

    test-all:
        cmd: ./go test -max-lines=all ./...

    generate-mockery-config:
        cmds:
            - ./scripts/generate-mockery-config.sh
        generates:
            - gen/mockery/.mockery.yaml
        sources:
            - "{{.MOCKERY_SOURCE_FILES}}"

    install-executables:
        cmds:
            - ./go install ./cmd/{{.BINARY_NAME}}

    generate-jsonschema-single:
        internal: true
        requires: { vars: [ITEMNAME, ITEM] }
        cmds:
            - mkdir -p ./gen/jsonschema/go/{{.ITEMNAME}}
            - ./go tool go-jsonschema {{.ITEM}} -o=./gen/jsonschema/go/{{.ITEMNAME}}/model.go -p={{.ITEMNAME}}

    generate-jsonschema:
        run: once
        cmds:
            - for: { var: JSONSCHEMA_FILES }
              vars: { ITEMNAME: '{{ splitList "/"  .ITEM | last | replace ".schema.json" "" }}', ITEM: "{{.ITEM}}" }
              task: generate-jsonschema-single

        generates:
            - ./gen/jsonschema/go/*.go
        sources:
            - "**/*.schema.json"

    # copyrc:
    #     desc: copyrc
    #     cmds:
    #         - ./go tool copyrc -config=.copyrc.hcl -force
    #     sources:
    #         - .copyrc.hcl
    #     generates:
    #         - "**/*.copyrc.lock"
    #     status:
    #         - ./go tool copyrc -config=.copyrc.hcl -status

    go-mod-tidy:
        env: { GOPROXY: https://proxy.golang.org, GOSUMDB: sum.golang.org, GOPRIVATE: github.com/walteh }
        cmds:
            - for: { var: GO_MODULES }
              cmd: |
                  cd {{.ITEM}} && go mod tidy

    go-mod-upgrade:
        run: once
        env: { GOPROXY: https://proxy.golang.org, GOSUMDB: sum.golang.org, GOPRIVATE: github.com/walteh }
        cmds:
            - ./go tool go-mod-upgrade --force

    refresh-extension-go:
        dir: code-extension
        cmds:
            - rm -rf out
            - mkdir -p out
            - task: go
            - bun install

    # not really a huge size difference in the .vsix file, and its way slower to build
    refresh-extension-tinygo:
        dir: code-extension
        cmds:
            - rm -rf out
            - mkdir -p out
            - task: wasm-tinygo
            - bun install

    rebuild-extension:
        dir: code-extension
        cmds:
            - task: refresh-extension-go
            - bun run build

    package-extension:
        dir: code-extension
        cmds:
            - task: refresh-extension-go
            - bun run package
            - mv ./*.vsix ~/Downloads
            - open https://marketplace.visualstudio.com/manage/publishers/walteh

    go:
        desc: Build WASM module
        cmds:
            - go build -o code-extension/out/{{.BINARY_NAME}} ./cmd/{{.BINARY_NAME}}

    wasm:
        desc: Build WASM module
        cmds:
            - GOOS=js GOARCH=wasm go build -o code-extension/out/{{.BINARY_NAME}}.wasm ./cmd/{{.BINARY_NAME}}-wasm
            - cp "$(go env GOROOT)/lib/wasm/wasm_exec.js" code-extension/out/wasm_exec.js

    wasm-tinygo:
        desc: Build WASM module with TinyGo
        cmds:
            - GOOS=js GOARCH=wasm tinygo build -o ./code-extension/out/{{.BINARY_NAME}}.tinygo.wasm ./cmd/{{.BINARY_NAME}}-wasm
            - cp "$(tinygo env TINYGOROOT)/targets/wasm_exec.js" ./code-extension/out/wasm_exec.tinygo.js

    wasi:
        desc: Build WASI module
        cmds:
            - GOOS=wasip1 GOARCH=wasm go build -o ./code-extension/out/{{.BINARY_NAME}}.wasi.wasm ./cmd/{{.BINARY_NAME}}-wasi
            - cp "$(go env GOROOT)/lib/wasm/wasm_exec.js" ./code-extension/out/wasm_exec.wasi.js

    wasi-tinygo:
        desc: Build WASI module
        cmds:
            - GOOS=wasip1 GOARCH=wasm tinygo build -o ./code-extension/out/{{.BINARY_NAME}}.wasi.wasm ./cmd/{{.BINARY_NAME}}-wasi
            - cp "$(tinygo env TINYGOROOT)/targets/wasm_exec.js" ./code-extension/out/wasm_exec.wasi.js
